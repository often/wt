export const WT=e=>{const n=document.createElement('div'),t=document.createElement('input'),o={prefix:e.prefix??'',suffix:e.suffix??' $',commands:e.commands??{},addCommand(e){this.commands[e.name]=e},addCommands(e){for(const n in e)this.commands[n]=e[n]},print(e){const t=document.createElement('pre');t.textContent=e,n.append(t)}};return e.help?(t.placeholder='type `help` and hit enter for a list of commands...',o.commands.help=(()=>{const e=document.createElement('p');e.textContent=`${o.prefix}help${o.suffix} available commands (${Object.keys(o.commands).length})`,n.append(e);for(const e in o.commands){const{length:t}=o.commands[e],c=document.createElement('p');c.textContent=t?1===t?`${e} (takes ${t} argument)`:`${e} (takes ${t} arguments)`:e,n.append(c)}})):t.placeholder='type here and hit enter to run a command...',e.clear&&(o.commands.clear=(()=>n.textContent='')),e.autofocus&&(t.autofocus=!0),e.banner&&o.print(e.banner),t.addEventListener('keyup',({key:e})=>{if('Enter'===e){const[e,...c]=t.value.split(/\s/);if(!e)return;const a=o.commands[e];if(a)switch(a.constructor.name){case'Function':const t=a(...c);if(t){const c=document.createElement('p');c.textContent=`${o.prefix}${e}${o.suffix} ${t}`,n.append(c)}break;case'AsyncFunction':a(...c).then(t=>{if(t){const c=document.createElement('p');c.textContent=`${o.prefix}${e}${o.suffix} ${t}`,n.append(c),n.scrollTop=n.scrollHeight}})}else{const t=document.createElement('p');t.textContent=`${o.prefix}${e}${o.suffix} unknown command`,n.append(t)}t.value='',n.scrollTop=n.scrollHeight}}),e.element.append(n),e.element.append(t),o}
